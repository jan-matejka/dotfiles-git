[user]
    name  = Jan MatÄ›jka
    email = jan@matejka.ninja

[color]
    status = auto
    diff   = auto
    branch = auto

[alias]
    a          = add
    b          = branch
    bb         = branch-backup
    che        = cherry-pick

    ci         = commit
    cia        = commit --amend --no-edit

    cl         = clone
    co         = checkout

    # TODO: run git-lg1 after git-co and git-rebase
    # this breaks tab-completion.
    # https://stackoverflow.com/questions/66890696/git-completion-for-alias-as-if-for-git-itself
    # works for bash only I suppose.
    # https://stackoverflow.com/questions/14307086/tab-completion-for-aliased-sub-commands-in-zsh-alias-gco-git-checkout
    # zsh but different alias.
    # co         = "!f() { git checkout $@ && git log -1; }; f"

    cn         = config

    d          = diff
    dc         = diff --cached

    fpsh       = push --force-with-lease

    lgf         = log --show-signature --show-notes=* --stat --graph --color --abbrev-commit --decorate=full --pretty=fuller -50

    lg1        = lg -1 --stat
    # one line pr commit. Usefull to line count (wc -l)
    lgo        = log --oneline --decorate

    # last commits log message (useful before reset HEAD~1)
    lgm        = log  --format="%s" -1

    # log - print hash only
    # usefull for `g lgh <filtering-argv> | xargs`
    lgh        = log --pretty=format:"%H"
    # log oneline with date
    lgd        = log --color --pretty=format:'%C(yellow)%h %C(green)%cs %C(reset)%s' --decorate

    lg         = log --oneline --decorate --graph
    lgs        = lg --stat

    # show remotes with their urls
    r          = remote -v

    w       = worktree
    # cleanup build artifacts.
    # ``git welp -x`` when updating .gitignore.
    welp       = clean -fd

    # prune no-longer valid remote refs to prevent misleading decorations
    # in git-log and tracking branches that no longer exist.
    f          = fetch -p

    # This spells `g rc` on the command line. Should probably be repurposed for sending
    # negative review commentary. But also maybe as external `grc` to be more on the nose since this
    # took me 2 months to realize. Also nice
    # addition to `grr` - https://github.com/jan-matejka/dotfiles-zsh/blob/a5cf4dd3d724fd425a7f5c08a4bcec187e130ab4/.zshrc#L166
    rc = rebase --continue
    ri = rebase -i

    s          = status

    # Generate a diffstat.
    # A list of changed file paths and numerical summary of the changes in each. The diffstat is
    # separated from commit message by a line of `---`.
    # Generate a unified diff.
    sh = show --stat -u

    # Show command for git-review https://github.com/yaccz/git-review
    show-review = show --stat -u --color=always

    t          = tag
    psh        = push
    p          = push

    # show tracking branch
    bt = "!git branch --list -vv $(git rev-parse --abbrev-ref HEAD)"

    # commit amend everything and force push. Usefull in some stupid
    # environments
    cipp = "!git commit -a -m 'wip'; git push --force-with-lease"

    # make a WIP commit
    cip = "commit -a -m wip"

    # chop n last commits from branch or just the HEAD if n not given.
    chop = "!f() { ch=1; [ $# = 1 ] && ch=$1; git reset --hard HEAD~$ch; }; f";
    ch = "!git chop"

    # chop & pull; counter-part to git-cip
    chpl = "!git chop && git pull"

    skipci = push -o ci.skip
# }}}

[push]
    default = tracking

[transfer]
    fsckObjects = true

[sendemail]
    assume8bitEncoding = true

[rebase]
    autosquash = true

[pull]
  ff = only

[init]
  defaultBranch = master

[clone]
    defaultRemoteName = up

[includeIf "gitdir:~/git/eb/"]
  path = ~/.gitconfig.eb
